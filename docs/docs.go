// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/errors/{domain}": {
            "post": {
                "description": "Recebe detalhes de um erro e seu contexto, retornando possíveis soluções baseadas em LLM",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "errors"
                ],
                "summary": "Analisar e resolver erros por domínio",
                "parameters": [
                    {
                        "enum": [
                            "kubernetes",
                            "github",
                            "argocd"
                        ],
                        "type": "string",
                        "description": "Domínio técnico (kubernetes, github, argocd)",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Detalhes do erro e contexto",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ErrorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Solução para o erro",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Erro de validação ou requisição inválida",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "404": {
                        "description": "Domínio não encontrado",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "500": {
                        "description": "Erro interno do servidor",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIError": {
            "description": "Estrutura de erro padrão retornada pela API",
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "type": "string",
                    "example": "O campo error_details é obrigatório"
                },
                "message": {
                    "type": "string",
                    "example": "Parâmetros inválidos"
                }
            }
        },
        "models.ErrorRequest": {
            "description": "Requisição contendo os detalhes do erro a ser analisado",
            "type": "object",
            "required": [
                "error_details"
            ],
            "properties": {
                "context": {
                    "type": "string",
                    "example": "Deployment em cluster Kubernetes 1.26 com imagem Docker personalizada"
                },
                "error_details": {
                    "type": "string",
                    "example": "CrashLoopBackOff: container failed to start"
                }
            }
        },
        "models.ErrorResponse": {
            "description": "Resposta contendo análise e solução para o erro reportado",
            "type": "object",
            "required": [
                "error"
            ],
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.ErrorSolution"
                },
                "message": {
                    "type": "string",
                    "example": "Análise concluída com sucesso"
                }
            }
        },
        "models.ErrorSolution": {
            "description": "Estrutura contendo a causa identificada e soluções propostas para o erro",
            "type": "object",
            "required": [
                "causa",
                "solucao"
            ],
            "properties": {
                "causa": {
                    "type": "string",
                    "example": "Imagem Docker inválida"
                },
                "solucao": {
                    "type": "string",
                    "example": "kubectl describe pod meu-pod\nkubectl logs meu-pod --previous"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Error resolution endpoints",
            "name": "errors"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Hefestus API",
	Description:      "Error resolution API using local LLM",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
